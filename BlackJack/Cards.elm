{--
  Funktionale Frontend Entwicklung
  BjÃ¶rn Kaiser
  23.01.2018

  Additional installed packages: elm-community/random-extra, tesk9/accessible-html

  Accessibility module documentation: https://github.com/tesk9/accessible-html/blob/master/src/Accessibility.elm

  Requirements - The following software was used for testing:
    - the screen reader JAWS : http://www.freedomsci.de/serv01.htm
    - the Google Chrome browser

  Note: The tabindex (allows setting the focus on an element by means of the tab-key) value has three different meanings depending on the value:
    -1  : element cannot be focused
    0   : the elements' order is respected
    >0  : the value determines the tab position
--}
module BlackJack.Cards exposing (..)
-- package: elm-community/random-extra
import Random exposing (Seed, generate)
import Random.List exposing (shuffle)

{--
  The card representation consists of a record holding the suit, face and the url to the corresponding card's image file.
--}
type alias Card =
  { suit : String
  , face : String
  , url : String
  }
{--
  The card deck is generated by means of the following two lists which specify the cards suits and faces.
  The suits are: clubs, spades, hearts, diamonds
  The faces are: the numbers [2..10] and jack (value of 10), queen (value of 10), king (value of 10), ace (value of 1 or 11)
--}
cardSuits = ["clubs", "spades", "hearts", "diamonds"]
--cardSuits = ["clubs"]
cardFaces = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "jack", "queen", "king", "ace"]
--cardFaces = ["ace","7", "ace", "ace", "3", "ace", "3"]
{--
  This is the maximum value a hand may hold.
--}
handLimit = 21
{--
  This is the minimum value the dealer's hand must hold.
--}
dealerMinValue = 17

{--
  This function uses generateCardDeck to combine six card decks to a huge card stack of 312 cards (6 x 52 cards).
--}
createCardStack : List Card
createCardStack =
    (generateCardDeck cardSuits cardFaces) ++ (generateCardDeck cardSuits cardFaces) ++ (generateCardDeck cardSuits cardFaces) ++ (generateCardDeck cardSuits cardFaces) ++ (generateCardDeck cardSuits cardFaces) ++ (generateCardDeck cardSuits cardFaces)
{--
  This function generates a card deck from the suits and faces specified in the corresponding lists.
  Note: A card deck consists of 52 cards.
--}
generateCardDeck : List String -> List String -> List Card
generateCardDeck suits faces =
  case suits of
    [] ->
      []
    s :: ss ->
      case faces of
        [] ->
          []
        f :: fs ->
          List.append ({suit = s, face = f, url = "/svg-cards/" ++ f ++ "_of_" ++ s ++ ".svg"} :: (generateCardDeck [s] fs)) (generateCardDeck ss faces)

{--
    This function returns the sum of the passed in list of cards.
    It uses the helper functions getNumberOfAces, getHandValueWithoutAces and getCardValue to add the cards' faces and finally adds the aces in favor of the player (or dealer respectively).
--}
getHandValue : List Card -> Int
getHandValue cards =
  if cards == [] then
    0
  else
    if getHandValueWithoutAces cards > 0 then
      if getNumberOfAces cards > 0 then
        getHandValueWithoutAces cards + if ((handLimit - getHandValueWithoutAces cards) - (((handLimit - getHandValueWithoutAces cards) // 11) * 11)) >= ((getNumberOfAces cards) - ((handLimit - getHandValueWithoutAces cards) // 11)) then (((handLimit - getHandValueWithoutAces cards) // 11) * 11) + ((getNumberOfAces cards - ((handLimit - getHandValueWithoutAces cards) // 11)) * 1) else getNumberOfAces cards
      else
        getHandValueWithoutAces cards
    else
      (((handLimit - getHandValueWithoutAces cards) // 11) * 11) + ((getNumberOfAces cards - ((handLimit - getHandValueWithoutAces cards) // 11)) * 1)

{--
  Returns the number of aces.
--}
getNumberOfAces : List Card -> Int
getNumberOfAces cards =
  case cards of
    [] ->
      0
    c :: cs ->
      if c.face == "ace" then
        1 + getNumberOfAces cs
      else
        getNumberOfAces cs
{--
  This function is used by the function getHandValue to add all cards except the aces which are handled separately by the function getHandValue.
--}
getHandValueWithoutAces : List Card -> Int
getHandValueWithoutAces cards =
  case cards of
    [] ->
      0
    c :: cs ->
      getCardValue c + getHandValueWithoutAces cs
{--
  This function extracts the card's face and converts it to an integer value.
  Aces are ignored by returning a zero. The ace is represented by "1".
--}
getCardValue : Card -> Int
getCardValue card =
  if List.member card.face ["jack", "queen", "king"] then
    10
  else
    case String.toInt card.face of
      Err msg ->
        -- for an ace a zero is returned here
        0
      Ok value ->
        value
{--
  This function takes the next card from the model's cardStack and appends it to the specified list of cards (hand).
--}
takeCard : Int -> List Card -> List Card -> List Card
takeCard currentCardStackIndex cardStack cards =
  case List.head (List.drop currentCardStackIndex cardStack) of
    Just card ->
      card :: cards
    Nothing ->
      takeCard (currentCardStackIndex + 1) cardStack cards
